import type { DeclaredFlag, Invalid } from "@/Declared/Flags"

import { equals, identity, ifElse } from "Function"
import IO from "IO"
import { isEmpty } from "List"
import String from "String"

import { DeclaredFlag, ExpectedBoolean, ExpectedString, UnexpectedFlag } from "@/Declared/Flags"
import { FBoolean, FString } from "@/Declared/Flags"
import { camelToKebab } from "@/String"



export alias DeclarationRenderer = String -> String -> List String -> String -> String

flagify :: String -> String
export flagify = ifElse(
  pipe(
    String.length,
    equals(1),
  ),
  mappend("-"),
  pipe(
    camelToKebab,
    mappend("--"),
  ),
)

_summarizeAliasesWithColor :: Boolean -> List String -> String
_summarizeAliasesWithColor = (useColor, als) => pipe(
  map(flagify),
  useColor ? map(IO.yellow) : identity,
  String.join(" / "),
)(als)

_summarizeAliases = _summarizeAliasesWithColor(false)


_flagBlockWithColor :: Boolean -> DeclarationRenderer
_flagBlockWithColor = (useColor, kind, k, als, desc) => `${
  flagify((useColor ? IO.green : identity)(k))
}${isEmpty(als) ? "" : " / " ++ _summarizeAliasesWithColor(useColor, als)}\n  ${kind}\n  ${desc}`

_flagMarkdownBlock :: DeclarationRenderer
_flagMarkdownBlock = (kind, k, als, desc) => "`"
    ++ flagify(k)
    ++ "`"
    ++ `${
      isEmpty(als)
        ? ""
        : " / "
          ++ pipe(
            _summarizeAliases,
            (z) => "`" ++ z ++ "`",
          )(als)
    }\n  *${kind}*\n  ${desc}`



printWithRenderer :: DeclarationRenderer -> List DeclaredFlag -> String
export printWithRenderer = (render, x) => pipe(
  map(
    where {
      DeclaredFlag(FBoolean, k, als, desc) =>
        render("boolean", k, als, desc)

      DeclaredFlag(FString, k, als, desc) =>
        render("string", k, als, desc)
    },
  ),
  String.join("\n\n"),
)(x)

export printLegend = printWithRenderer(_flagBlockWithColor(false))
export printLegendWithColor = printWithRenderer(_flagBlockWithColor(true))
export printMarkdownLegend = printWithRenderer(_flagMarkdownBlock)

printIssues :: List Invalid -> String
export printIssues = pipe(
  map(
    where {
      UnexpectedFlag(f) =>
        "Unexpected flag " ++ f ++ "."

      ExpectedBoolean(b) =>
        "Expected boolean flag (" ++ b ++ "), but got string."

      ExpectedString(s) =>
        "Expected string flag (" ++ s ++ "), but got boolean."
    },
  ),
  String.join("\n\t"),
  mappend("Errors during parsing.\n\t"),
)
