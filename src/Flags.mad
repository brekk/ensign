import type { Maybe } from "Maybe"

import { ifElse, when } from "Function"
import IO from "IO"
import List from "List"
import { Just, Nothing } from "Maybe"
import String from "String"



export type Flag = FlagToggle(String, Boolean) | Flag(String, String)

isStringFlag :: String -> Boolean
export isStringFlag = String.startsWith("--")

isNegatedFlag :: String -> Boolean
export isNegatedFlag = String.startsWith("--no-")

isShortFlag :: String -> Boolean
export isShortFlag = String.startsWith("-")

isFlag :: String -> Boolean
export isFlag = (x) => isShortFlag(x) || isStringFlag(x) || isNegatedFlag(x)

cleanFlag :: String -> String
export cleanFlag = when(
  isFlag,
  ifElse(isNegatedFlag, String.drop(5), ifElse(isStringFlag, String.drop(2), String.drop(1))),
)

splitJointFlags :: String -> List String
export splitJointFlags = (x) => if (String.includes('=', x)) {
  String.split("=", x)
} else if (isShortFlag(x) && !isStringFlag(x)) {
  pipe(
    String.drop(1),
    String.split(""),
    map(mappend("-")),
  )(x)
} else {
  of(x)
}

handleMultipleBooleanFlags :: List Flag -> List String -> List Flag
export handleMultipleBooleanFlags = (stack, x) => pipe(
  map(
    pipe(
      String.drop(1),
      FlagToggle($, true),
    ),
  ),
  List.concat(stack),
)(x)

handleStringFlag :: List Flag -> List String -> String -> List Flag
export handleStringFlag = (stack, curr, fixed) => where(List.nth(0, curr)) {
  Just(firstCurr) =>
    if (!isFlag(firstCurr)) {
      List.append(Flag(fixed, firstCurr), stack)
    } else {
      stack
    }

  _ =>
    stack
}

handleBooleanFlag :: List Flag -> String -> String -> List Flag
export handleBooleanFlag = (stack, prev, fixed) => if (!isFlag(prev)) {
  stack
} else {
  List.append(FlagToggle(fixed, !isNegatedFlag(prev)), stack)
}

handleOtherFlags :: List Flag -> String -> List String -> List Flag
export handleOtherFlags = (stack, prev, current) => {
  fixed = cleanFlag(prev)
  currentIsSingle = List.length(current) == 1
  return if (isStringFlag(prev) || isShortFlag(prev) && currentIsSingle) do {
    IO.pTrace(IO.green("isStringFlag"), isStringFlag(prev))
    return if (isNegatedFlag(prev)) {
      List.append(FlagToggle(fixed, false), stack)
    } else if (currentIsSingle) {
      handleStringFlag(stack, current, fixed)
    } else do {
      IO.pTrace("\tskipping?!?!?", { prev, current, stack })
      return handleBooleanFlag(stack, prev, fixed)
    }
  } else do {
    IO.pTrace("\thandling boolean", { stack, prev, fixed })
    return handleBooleanFlag(stack, prev, fixed)
  }
}

updateStack :: List Flag -> Maybe (List String) -> List String -> List Flag
export updateStack = (stack, maybePrevious, current) => {
  IO.pTrace("▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚", stack)
  return where(maybePrevious) {
    Just(previous) =>
      do {
        prevLen = List.length(previous)
        return if (prevLen > 2) {
          handleMultipleBooleanFlags(stack, previous)
        } else {
          where(previous) {
            [k, v] =>
              isFlag(k) && !isFlag(v)
                ? List.append(Flag(cleanFlag(k), v), stack)
                : handleMultipleBooleanFlags(stack, previous)

            [x] =>
              handleOtherFlags(stack, x, current)

            _ =>
              do {
                IO.pTrace("\tUNHANDLED CASE!?!?!?", stack)
                return stack
              }
          }
        }
      }

    Nothing =>
      do {
        IO.pTrace("\tNOTHING CASE!?!?!?", stack)
        return stack
      }
  }
}

parseFlags :: List String -> List Flag
export parseFlags = pipe(
  map(splitJointFlags),
  (steps) => List.reduce(
    (agg, curr) => ({ prev: Just(curr), stack: updateStack(agg.stack, agg.prev, curr) }),
    { stack: [], prev: List.nth(0, steps) },
    // stuff an empty value at the end so we process all entries
    List.append([], List.tail(steps)),
  ),
  .stack,
)
