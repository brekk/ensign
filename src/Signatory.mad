import type { Flag } from "@/Flags"

import Dict from "Dictionary"
import { reduce } from "List"

import { Flag, FlagToggle } from "@/Flags"



export type FlagKind = FString | FBoolean

export alias MatchedDictionary = {
  keyed :: Dictionary String String,
  on :: Dictionary String Boolean,
}

export type DeclaredFlag = DeclaredFlag(List String, FlagKind)
export type ApiFlag = ApiFlag(List String, Flag)

flag :: List String -> DeclaredFlag
export flag = DeclaredFlag($, FString)

toggle :: List String -> DeclaredFlag
export toggle = DeclaredFlag($, FBoolean)

// consumeFlags :: List ApiFlag -> CliApi
// export consumeFlags = (expected) => pipe(
//   reduce(
//     (agg, x) => where(x) {
//       ApiFlag(aliases, MatchedString(str)) =>
//         ({ ...agg, keyed: Dict.insert(aliases, str, agg.keyed) })
//
//       ApiFlag(aliases, MatchedBoolean(bool)) =>
//         ({ ...agg, on: Dict.insert(aliases, bool, agg.on) })
//     },
//     { on: {{}}, keyed: {{}} },
//   ),
// )(expected)

saveAliases :: List DeclaredFlag -> Dictionary String #[List String, FlagKind]
export saveAliases = pipe(
  chain(where { DeclaredFlag(aliases, kind) => map((a) => #[a, #[aliases, kind]], aliases) }),
  Dict.fromList,
)
